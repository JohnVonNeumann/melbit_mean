doctype html
html
  head
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title= title
    link(rel='stylesheet', href='/bootstrap/css/superhero.bootstrap.min.css')
    link(rel='stylesheet', href='/stylesheets/home_style.css')
  body
    .navbar.navbar-default.navbar-fixed-top
      .container
        .navbar-header
          a.navbar-brand(href='/') Melbit

          button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#navbar-main')
            span.sr-only Toggle Navigation
            span.icon-bar
            span.icon-bar
            span.icon-bar
        #navbar-main.navbar-collapse.collapse
          ul.nav.navbar-nav
              li
                a(href='/users/login') Login
              li
                a(href='/users/signup') Signup
              li
                a(href='/contact') Get Listed
              li
                a(href='/blog/') Blog
              li
                a(href='/location/directory') Directory
              li
                a(href='/about/') About
              li
                a(href='/contact/') Contact
              li
                a(href='/faq/') FAQ


    block content
      input(id="pac-input", class="controls", type="text", placeholder="Where to?")
      #map

        script.
          var map;

          // Create a new blank array for all the listing markers.
          var markers = [];

          // This is a global var used to ensure only one shape is rendered.
          var polygon = null;

          function initMap() {
            // Create a styles array to use with the map.
            var styles = [
            {
            "elementType": "geometry",
            "stylers": [
            {
            "color": "#1d2c4d"
            }
            ]
            },
            {
            "elementType": "labels.text.fill",
            "stylers": [
            {
            "color": "#8ec3b9"
            }
            ]
            },
            {
            "elementType": "labels.text.stroke",
            "stylers": [
            {
            "color": "#1a3646"
            }
            ]
            },
            {
            "featureType": "administrative.country",
            "elementType": "geometry.stroke",
            "stylers": [
            {
            "color": "#4b6878"
            }
            ]
            },
            {
            "featureType": "administrative.land_parcel",
            "elementType": "labels.text.fill",
            "stylers": [
            {
            "color": "#64779e"
            }
            ]
            },
            {
            "featureType": "administrative.province",
            "elementType": "geometry.stroke",
            "stylers": [
            {
            "color": "#4b6878"
            }
            ]
            },
            {
            "featureType": "landscape.man_made",
            "elementType": "geometry.stroke",
            "stylers": [
            {
            "color": "#334e87"
            }
            ]
            },
            {
            "featureType": "landscape.natural",
            "elementType": "geometry",
            "stylers": [
            {
            "color": "#023e58"
            }
            ]
            },
            {
            "featureType": "poi",
            "elementType": "geometry",
            "stylers": [
            {
            "color": "#283d6a"
            }
            ]
            },
            {
            "featureType": "poi",
            "elementType": "labels.text",
            "stylers": [
            {
            "visibility": "off"
            }
            ]
            },
            {
            "featureType": "poi",
            "elementType": "labels.text.fill",
            "stylers": [
            {
            "color": "#6f9ba5"
            }
            ]
            },
            {
            "featureType": "poi",
            "elementType": "labels.text.stroke",
            "stylers": [
            {
            "color": "#1d2c4d"
            }
            ]
            },
            {
            "featureType": "poi.business",
            "stylers": [
            {
            "visibility": "off"
            }
            ]
            },
            {
            "featureType": "poi.park",
            "elementType": "geometry.fill",
            "stylers": [
            {
            "color": "#023e58"
            }
            ]
            },
            {
            "featureType": "poi.park",
            "elementType": "labels.text.fill",
            "stylers": [
            {
            "color": "#3C7680"
            }
            ]
            },
            {
            "featureType": "road",
            "elementType": "geometry",
            "stylers": [
            {
            "color": "#304a7d"
            }
            ]
            },
            {
            "featureType": "road",
            "elementType": "labels.icon",
            "stylers": [
            {
            "visibility": "off"
            }
            ]
            },
            {
            "featureType": "road",
            "elementType": "labels.text.fill",
            "stylers": [
            {
            "color": "#98a5be"
            }
            ]
            },
            {
            "featureType": "road",
            "elementType": "labels.text.stroke",
            "stylers": [
            {
            "color": "#1d2c4d"
            }
            ]
            },
            {
            "featureType": "road.highway",
            "elementType": "geometry",
            "stylers": [
            {
            "color": "#2c6675"
            }
            ]
            },
            {
            "featureType": "road.highway",
            "elementType": "geometry.stroke",
            "stylers": [
            {
            "color": "#255763"
            }
            ]
            },
            {
            "featureType": "road.highway",
            "elementType": "labels.text.fill",
            "stylers": [
            {
            "color": "#b0d5ce"
            }
            ]
            },
            {
            "featureType": "road.highway",
            "elementType": "labels.text.stroke",
            "stylers": [
            {
            "color": "#023e58"
            }
            ]
            },
            {
            "featureType": "transit",
            "stylers": [
            {
            "visibility": "off"
            }
            ]
            },
            {
            "featureType": "transit",
            "elementType": "labels.text.fill",
            "stylers": [
            {
            "color": "#98a5be"
            }
            ]
            },
            {
            "featureType": "transit",
            "elementType": "labels.text.stroke",
            "stylers": [
            {
            "color": "#1d2c4d"
            }
            ]
            },
            {
            "featureType": "transit.line",
            "elementType": "geometry.fill",
            "stylers": [
            {
            "color": "#283d6a"
            }
            ]
            },
            {
            "featureType": "transit.station",
            "elementType": "geometry",
            "stylers": [
            {
            "color": "#3a4762"
            }
            ]
            },
            {
            "featureType": "water",
            "elementType": "geometry",
            "stylers": [
            {
            "color": "#0e1626"
            }
            ]
            },
            {
            "featureType": "water",
            "elementType": "labels.text.fill",
            "stylers": [
            {
            "color": "#4e6d70"
            }
            ]
            }
          ];
          // End of styling

          // Constructor creates a new map - only center and zoom are required.
          map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: -37.813517, lng: 144.962808},
            zoom: 13,
            styles: styles,
            mapTypeControl: false,
            zoomControl: false,
            scaleControl: false,
            fullScreenControl: true,
            streetViewControl: false,
          });

          // These are the real estate listings that will be shown to the user.
          // Normally we'd have these in a database instead.
          // I have now created a basic controller data array, I had planned to move this
          // data from here when I did the controller swap, but I will leave it until I move
          // into the model work seeing as I think that will be a more fluid switch.
          var locations = [
              {title: 'Altius Coffee Brewers', location: {lat:-37.819659, lng:144.956444}},
              {title: 'Design Industries', location: {lat:-37.810520, lng:144.946315}},
              {title: 'Imbiss25', location: {lat:-37.870698, lng:144.980169}},
              {title: 'Melbourne Bitcoin Technology Centre', location: {lat:-37.822549, lng:144.965126}},
              {title: 'Jimbo\'s Cafe', location: {lat:-37.818223, lng:144.954088}}
          ];

          var largeInfowindow = new google.maps.InfoWindow();

          // Initalise the drawing manager.
          var drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControl: true,
            drawingControlOptions: {
              position: google.maps.ControlPosition.LEFT_CENTER,
              drawingModes: ['polygon']
            },
            markerOptions: {icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'},
          });

          // Try and move this  when everything is formatted
          drawingManager.setMap(map);

          // Create the search box and link it to the UI element.
          var input = document.getElementById('pac-input');
          var searchBox = new google.maps.places.SearchBox(input);
          map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(input);

          // Bias the SearchBox results towards current map's viewport.
          map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
          });

          // Styling the markers to create a difference on mouseover and the like.
          var defaultIcon = makeMarkerIcon('F2A900');

          // Creates a "highlight" colour for when user performs a mouseover.
          var highlightedIcon = makeMarkerIcon('c2f200');

          var bounds = new google.maps.LatLngBounds();

          // The following group uses the location array to create an array of markers on initialize.
          for (var i = 0; i < locations.length; i++) {
            // Get the position from the location array.
            var position = locations[i].location;
            var title = locations[i].title;

            // Create a marker per location, and put into markers array.
            var marker = new google.maps.Marker({
              map: map,
              position: position,
              title: title,
              icon: defaultIcon,
              animation: google.maps.Animation.DROP,
              id: i
            });
            // Push the marker to our array of markers.
            markers.push(marker);
            // Create an onclick event to open an infowindow at each marker.
            marker.addListener('click', function() {
              populateInfoWindow(this, largeInfowindow);
            });
            // Two event listeners - one for mouseover, one for mouseout, to change the colors back and forth.
            marker.addListener('mouseover', function() {
              this.setIcon(highlightedIcon);
            });
            marker.addListener('mouseout', function() {
              this.setIcon(defaultIcon);
            });

            // Add an event listener so that the polygon is captured,  call the
            // searchWithinPolygon function. This will show the markers in the polygon,
            // and hide any outside of it.
            drawingManager.addListener('overlaycomplete', function(event) {
              if (polygon) {
                polygon.setMap(null);
                hideListings(markers);
              }
              drawingManager.setDrawingMode(null);
              polygon = event.overlay;
              polygon.setEditable(true);
              searchWithinPolygon();
              polygon.getPath().addListener('set_at', searchWithinPolygon);
              polygon.getPath().addListener('insert_at', searchWithinPolygon);
            });

            bounds.extend(markers[i].position);
            }

            // Extend the boundaries of the map for each marker
            map.fitBounds(bounds);

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(function(position) {
                var pos = {
                  lat: position.coords.latitude,
                  lng: position.coords.longitude
                };

                infoWindow.setPosition(pos);
                infoWindow.setContent('Location found.');
                map.setCenter(pos);
              }, function() {
                handleLocationError(true, infoWindow, map.getCenter());
              });
            } else {
              // Browser doesn't support Geolocation
              handleLocationError(false, infoWindow, map.getCenter());
            }

          }


          // This function populates the infowindow when the marker is clicked. We'll only allow
          // one infowindow which will open at the marker that is clicked, and populate based
          // on that markers position.
          function populateInfoWindow(marker, infowindow) {
            // Check to make sure the infowindow is not already opened on this marker.
            if (infowindow.marker != marker) {
              // Clear the infowindow content to give the streetview time to load.
              infowindow.setContent('');
              infowindow.marker = marker;
              // Make sure the marker property is cleared if the infowindow is closed.
              infowindow.addListener('closeclick', function() {
              infowindow.marker = null;
              });
              var streetViewService = new google.maps.StreetViewService();
              var radius = 100;

              // In case the status is OK, which means the pano was found, compute the
              // position of the streetview image, then calculate the heading, then get a
              // panorama from that and set the options
              function getStreetView(data, status) {
              if (status == google.maps.StreetViewStatus.OK) {
                var nearStreetViewLocation = data.location.latLng;
                var heading = google.maps.geometry.spherical.computeHeading(
                nearStreetViewLocation, marker.position);
                infowindow.setContent('<div>' + '<span>' + marker.title + '</span> | &nbsp;' + '<span class="label label-default label-padding-infoWindow"> <a class="button btn-default" href="/location"> More Info </a> </span> | &nbsp;' + '</div><div id="pano"></div>' + contentString);
                var panoramaOptions = {
                  position: nearStreetViewLocation,
                  pov: {
                    heading: heading,
                    pitch: 10
                  }
                };
                var panorama = new google.maps.StreetViewPanorama(
                  document.getElementById('pano'), panoramaOptions);
                  } else {
                    infowindow.setContent('<div>' + marker.title + '</div>' +
                    '<div>No Street View Found</div>');
                }
              }
              // Use streetview service to get the closest streetview image within
              // 50 meters of the markers position
              streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView);
              // Open the infowindow on the correct marker.
              infowindow.open(map, marker);

              var contentString = '<div id="content">'+
              '<div id="bodyContent">'+
              '<span class="label label-warning label-padding-infoWindow"> Cafe </span> &nbsp;'+
              '<span class="label label-warning label-padding-infoWindow"> &nbsp;Food </span> &nbsp;'+
              '<span class="label label-warning label-padding-infoWindow"> &nbsp;Premium Wi-Fi </span> &nbsp;'+
              '</div>'+
              '</div>';

            }
          }

          // This function takes in a COLOR, and then creates a new marker
          // icon of that color. The icon will be 21 px wide by 34 high, have an origin
          // of 0, 0 and be anchored at 10, 34).
          function makeMarkerIcon(markerColor) {
            var markerImage = new google.maps.MarkerImage(
            'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+ markerColor +
            '|40|_|%E2%80%A2',
            new google.maps.Size(34,70),
            new google.maps.Point(0, 0),
            new google.maps.Point(10, 34),
            new google.maps.Size(21,34));
          return markerImage;
          }

          // Show listings function
          function showListings() {
            var bounds = new google.maps.LatLngBounds();
            // Extend the boundaries of the map for each marker and sisplay the markert
            for (var i = 0; i < markers.length; i++) {
              markers[i].setMap(map);
              bounds.extend(markers[i].position);
            }
            map.fitBounds(bounds);
          }

          // This function will loop through all listings and hide them.
          function hideListings() {
            for (var i = 0; i < markers.length; i++) {
              markers[i].setMap(null);
            }
          }

          // hides all markers outside the polygon, and shows only the ones within it.
          // used so users can specify an exact area of search
          function searchWithinPolygon() {
            for (var i = 0; i < markers.length; i++) {
              if (google.maps.geometry.poly.containsLocation(markers[i].position, polygon)) {
                markers[i].setMap(map);
              } else {
                markers[i].setMap(null);
              }
            }
          }

          // Function user to take an input from the polygon drawn by users, and then
          // zooms into that area in order to provide users with a more immersive experience
          // this is heavily adapted to my needs from the google course
          function zoomToArea() {
            // Intialise the geocoder
            var geocoder = new google.maps.Geocoder();
            // Get the address or place that the user entered
            var address = document.getElementById('zoom-to-area-text').value;
            // Make sure the address isn't blank.
            if (address == '') {
              window.alert('You must enter an area, or an address.');
            } else {
              // Geocode the address/area entered to get the centre. Then, center
              // the map on it and zoom in
              geocoder.geocode(
                { address: address,
                  componentRestrictions: {locality: 'New York'}
                }, function(results, status) {
                  if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);
                    map.setZoom(15);
                  } else {
                    window.alert('We could not find that location - try entering a more specific place');
                  }
                });
            }
          }

        script(src='/javascripts/jquery-3.1.1.js')
        script(async='', defer='', src='https://maps.googleapis.com/maps/api/js?key='+MAP_API_KEY+'&libraries=places,drawing,geometry&v=3&callback=initMap')
        script(src='/bootstrap/js/bootstrap.min.js')

      footer
        .row
          .col-xs-12
            small &copy; Melbit 2017
